use alloy::primitives::B256;
use blake2::{Blake2s256, Digest};
use reth_revm::bytecode::LegacyAnalyzedBytecode;

pub const BYTECODE_ALIGNMENT: usize = core::mem::size_of::<u64>();
pub const JUMPDEST: u8 = 0x5b;

// ZKsync OS native hash of empty bytecode.
pub const EMPTY_BYTE_CODE_HASH: B256 = B256::new([
    0x69, 0x21, 0x7a, 0x30, 0x79, 0x90, 0x80, 0x94, 0xe1, 0x11, 0x21, 0xd0, 0x42, 0x35, 0x4a, 0x7c,
    0x1f, 0x55, 0xb6, 0x48, 0x2c, 0xa1, 0xa5, 0x1e, 0x1b, 0x25, 0x0d, 0xfd, 0x1e, 0xd0, 0xee, 0xf9,
]);

#[inline(always)]
const fn padding_len(deployed_len: usize) -> usize {
    let word = BYTECODE_ALIGNMENT;
    let rem = deployed_len % word;
    if rem == 0 { 0 } else { word - rem }
}

fn bytecode_artifacts(evm_code: &LegacyAnalyzedBytecode) -> Vec<u8> {
    let mut artifacts = evm_code.jump_table().as_slice().to_vec();
    let u64_capacity = evm_code.original_len().next_multiple_of(u64::BITS as usize);
    artifacts.resize(u64_capacity / 8, 0);
    artifacts
}

/// Compute internal ZKsync OS bytecode hash (bytecode + padding + jump bitmap) via Blake2s.
pub fn calculate_bytecode_hash(evm_code: &LegacyAnalyzedBytecode) -> B256 {
    let original = evm_code.original_bytes();
    let artifacts = bytecode_artifacts(evm_code);
    let pad = padding_len(original.len());
    let full_len = original.len() + pad + artifacts.len();

    let mut buf = vec![0u8; full_len];
    buf[..original.len()].copy_from_slice(&original);
    let bitmap_offset = original.len() + pad;
    buf[bitmap_offset..].copy_from_slice(&artifacts);

    B256::from_slice(&Blake2s256::digest(&buf))
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn calculate_bytecode_test() {
        use alloy::hex;
        use std::str::FromStr;
        let bytecode = LegacyAnalyzedBytecode::analyze(hex!("60806040523661001357610011610017565b005b6100115b61001f6102a0565b73ffffffffffffffffffffffffffffffffffffffff1633036102965760607fffffffff000000000000000000000000000000000000000000000000000000005f35167fc9a6301a000000000000000000000000000000000000000000000000000000008101610097576100906102df565b915061028e565b7fb0e10d7a000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008216016100e857610090610332565b7f70d7c690000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000082160161013957610090610376565b7f07ae5bc0000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000082160161018a576100906103a6565b7fa39f25e5000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008216016101db576100906103f2565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f7879207461726760648201527f6574000000000000000000000000000000000000000000000000000000000000608482015260a4015b60405180910390fd5b815160208301f35b61029e610405565b565b5f7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b5473ffffffffffffffffffffffffffffffffffffffff16919050565b60606102e9610415565b5f6102f736600481846108bc565b810190610304919061090b565b905061031f8160405180602001604052805f8152505f61041f565b505060408051602081019091525f815290565b60605f8061034336600481846108bc565b8101906103509190610951565b915091506103608282600161041f565b60405180602001604052805f8152509250505090565b6060610380610415565b5f61038e36600481846108bc565b81019061039b919061090b565b905061031f8161044a565b60606103b0610415565b5f6103b96102a0565b6040805173ffffffffffffffffffffffffffffffffffffffff831660208201529192500160405160208183030381529060405291505090565b60606103fc610415565b5f6103b96104ae565b61029e6104106104ae565b6104bc565b341561029e575f5ffd5b610428836104da565b5f825111806104345750805b15610445576104438383610526565b505b505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6104736102a0565b6040805173ffffffffffffffffffffffffffffffffffffffff928316815291841660208301520160405180910390a16104ab81610552565b50565b5f6104b761065e565b905090565b365f5f375f5f365f845af43d5f5f3e8080156104d6573d5ff35b3d5ffd5b6104e381610685565b60405173ffffffffffffffffffffffffffffffffffffffff8216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b905f90a250565b606061054b8383604051806060016040528060278152602001610abc60279139610750565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff81166105f5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610285565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9290921691909117905550565b5f7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6102c3565b73ffffffffffffffffffffffffffffffffffffffff81163b610729576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610285565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610618565b60605f5f8573ffffffffffffffffffffffffffffffffffffffff16856040516107799190610a52565b5f60405180830381855af49150503d805f81146107b1576040519150601f19603f3d011682016040523d82523d5f602084013e6107b6565b606091505b50915091506107c7868383876107d1565b9695505050505050565b606083156108665782515f0361085f5773ffffffffffffffffffffffffffffffffffffffff85163b61085f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610285565b5081610870565b6108708383610878565b949350505050565b8151156108885781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102859190610a68565b5f5f858511156108ca575f5ffd5b838611156108d6575f5ffd5b5050820193919092039150565b803573ffffffffffffffffffffffffffffffffffffffff81168114610906575f5ffd5b919050565b5f6020828403121561091b575f5ffd5b61054b826108e3565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b5f5f60408385031215610962575f5ffd5b61096b836108e3565b9150602083013567ffffffffffffffff811115610986575f5ffd5b8301601f81018513610996575f5ffd5b803567ffffffffffffffff8111156109b0576109b0610924565b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8501160116810181811067ffffffffffffffff82111715610a1c57610a1c610924565b604052818152828201602001871015610a33575f5ffd5b816020840160208301375f602083830101528093505050509250929050565b5f82518060208501845e5f920191825250919050565b602081525f82518060208401528060208501604085015e5f6040828501015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168401019150509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220c3d6e2f9af21088fe12b0b83df5fd964a6203e7192607bf44e7e3cb4ea82952564736f6c634300081c0033").into());
        let bytecode_hash = calculate_bytecode_hash(&bytecode);
        assert_eq!(
            bytecode_hash,
            B256::from_str("d2efa30ce7bb1a4fd366bfff424b0dd9be445172924b1f7ec0c07a146e58c7b4")
                .unwrap()
        );
    }

    #[test]
    fn calculate_empty_bytecode_test() {
        use alloy::hex;
        let bytecode = LegacyAnalyzedBytecode::analyze(hex!("").into());
        let bytecode_hash = calculate_bytecode_hash(&bytecode);
        assert_eq!(bytecode_hash, EMPTY_BYTE_CODE_HASH);
    }
}
